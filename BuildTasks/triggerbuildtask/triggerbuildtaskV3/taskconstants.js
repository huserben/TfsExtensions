"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FailTaskIfConditionsAreNotFulfilled = exports.CheckBuildsOnCurrentBranch = exports.TriggeredBuildIdsEnvironmentVariableName = exports.DependentOnFailedBuildsInput = exports.DependentOnFailedBuildConditionInput = exports.DependentOnSuccessfulBuildsInput = exports.DependentOnSuccessfulBuildConditionInput = exports.BlockInProgressBuilds = exports.BlockingBuildsInput = exports.IncludeCurrentBuildDefinitionInput = exports.EnableBuildInQueueConditionInput = exports.PasswordInput = exports.UsernameInput = exports.AuthenticationMethodInput = exports.IgnoreSslCertificateErrorsInput = exports.DelayBetweenBuildsInput = exports.BuildParametersInput = exports.QueueID = exports.DemandsVariableInput = exports.StoreInEnvironmentVariableInput = exports.DropDirectory = exports.DownloadBuildArtifacts = exports.TreatPartiallySucceededBuildAsSuccessfulInput = exports.CancelBuildsIfAnyFails = exports.FailTaskIfBuildNotSuccessfulInput = exports.WaitForBuildsToFinishRefreshTimeInput = exports.WaitForBuildsToFinishInput = exports.BranchToUseInput = exports.UseSameBranchInput = exports.CustomSourceVersionInput = exports.UseCustomSourceVersionInput = exports.UseSameSourceVersionInput = exports.QueueBuildForUserInput = exports.BuildDefinitionsToTriggerInput = exports.TeamProjectInput = exports.ServerUrlInput = exports.DefininitionIsInCurrentTeamProjectInput = void 0;
exports.DefininitionIsInCurrentTeamProjectInput = "definitionIsInCurrentTeamProject";
exports.ServerUrlInput = "tfsServer";
exports.TeamProjectInput = "teamProject";
exports.BuildDefinitionsToTriggerInput = "buildDefinition";
exports.QueueBuildForUserInput = "queueBuildForUserThatTriggeredBuild";
exports.UseSameSourceVersionInput = "useSameSourceVersion";
exports.UseCustomSourceVersionInput = "useCustomSourceVersion";
exports.CustomSourceVersionInput = "customSourceVersion";
exports.UseSameBranchInput = "useSameBranch";
exports.BranchToUseInput = "branchToUse";
exports.WaitForBuildsToFinishInput = "waitForQueuedBuildsToFinish";
exports.WaitForBuildsToFinishRefreshTimeInput = "waitForQueuedBuildsToFinishRefreshTime";
exports.FailTaskIfBuildNotSuccessfulInput = "failTaskIfBuildsNotSuccessful";
exports.CancelBuildsIfAnyFails = "cancelBuildsIfAnyFails";
exports.TreatPartiallySucceededBuildAsSuccessfulInput = "treatPartiallySucceededBuildAsSuccessful";
exports.DownloadBuildArtifacts = "downloadBuildArtifacts";
exports.DropDirectory = "dropDirectory";
exports.StoreInEnvironmentVariableInput = "storeInEnvironmentVariable";
exports.DemandsVariableInput = "demands";
exports.QueueID = "queueid";
exports.BuildParametersInput = "buildParameters";
exports.DelayBetweenBuildsInput = "delayBetweenBuilds";
exports.IgnoreSslCertificateErrorsInput = "ignoreSslCertificateErrors";
exports.AuthenticationMethodInput = "authenticationMethod";
exports.UsernameInput = "username";
exports.PasswordInput = "password";
exports.EnableBuildInQueueConditionInput = "enableBuildInQueueCondition";
exports.IncludeCurrentBuildDefinitionInput = "includeCurrentBuildDefinition";
exports.BlockingBuildsInput = "blockingBuildsList";
exports.BlockInProgressBuilds = "blockInProgressBuilds";
exports.DependentOnSuccessfulBuildConditionInput = "dependentOnSuccessfulBuildCondition";
exports.DependentOnSuccessfulBuildsInput = "dependentBuildsList";
exports.DependentOnFailedBuildConditionInput = "dependentOnFailedBuildCondition";
exports.DependentOnFailedBuildsInput = "dependentFailingBuildsList";
exports.TriggeredBuildIdsEnvironmentVariableName = "TriggeredBuildIds";
exports.CheckBuildsOnCurrentBranch = "checkbuildsoncurrentbranch";
exports.FailTaskIfConditionsAreNotFulfilled = "failTaskIfConditionsAreNotFulfilled";
